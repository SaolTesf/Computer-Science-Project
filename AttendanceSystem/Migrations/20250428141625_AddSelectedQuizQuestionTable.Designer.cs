// <auto-generated />
using System;
using AttendanceSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AttendanceSystem.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250428141625_AddSelectedQuizQuestionTable")]
    partial class AddSelectedQuizQuestionTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AttendanceSystem.Models.Attendance", b =>
                {
                    b.Property<int>("AttendanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AttendanceType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValue("Present");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<int>("SessionID")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmissionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UTDID")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("AttendanceID");

                    b.HasIndex("SessionID");

                    b.ToTable("Attendance", (string)null);
                });

            modelBuilder.Entity("AttendanceSystem.Models.ClassSession", b =>
                {
                    b.Property<int>("SessionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CourseID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("QuestionBankID")
                        .HasColumnType("int");

                    b.Property<DateTime>("QuizEndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("QuizStartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("SessionDateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("SessionID");

                    b.HasIndex("CourseID");

                    b.HasIndex("QuestionBankID");

                    b.ToTable("ClassSession", (string)null);
                });

            modelBuilder.Entity("AttendanceSystem.Models.Course", b =>
                {
                    b.Property<int?>("CourseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CourseNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ProfessorID")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("CourseID");

                    b.HasIndex("ProfessorID");

                    b.ToTable("Course", (string)null);
                });

            modelBuilder.Entity("AttendanceSystem.Models.CourseEnrollment", b =>
                {
                    b.Property<int>("EnrollmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CourseID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UTDID")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("EnrollmentID");

                    b.HasIndex("CourseID");

                    b.HasIndex("UTDID");

                    b.ToTable("CourseEnrollment", (string)null);
                });

            modelBuilder.Entity("AttendanceSystem.Models.Professor", b =>
                {
                    b.Property<string>("ID")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.HasKey("ID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Professor", (string)null);
                });

            modelBuilder.Entity("AttendanceSystem.Models.QuizQuestion", b =>
                {
                    b.Property<int>("QuestionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Option1")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Option2")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Option3")
                        .HasColumnType("longtext");

                    b.Property<string>("Option4")
                        .HasColumnType("longtext");

                    b.Property<int>("QuestionBankID")
                        .HasColumnType("int");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("QuestionID");

                    b.HasIndex("QuestionBankID");

                    b.ToTable("QuizQuestion", (string)null);
                });

            modelBuilder.Entity("AttendanceSystem.Models.QuizQuestionBank", b =>
                {
                    b.Property<int>("QuestionBankID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("CourseID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("QuestionBankID");

                    b.HasIndex("CourseID");

                    b.ToTable("QuizQuestionBank", (string)null);
                });

            modelBuilder.Entity("AttendanceSystem.Models.QuizResponse", b =>
                {
                    b.Property<int>("ResponseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AttendanceID")
                        .HasColumnType("int");

                    b.Property<int>("QuestionID")
                        .HasColumnType("int");

                    b.Property<int>("SelectedOption")
                        .HasColumnType("int");

                    b.HasKey("ResponseID");

                    b.HasIndex("AttendanceID");

                    b.HasIndex("QuestionID");

                    b.ToTable("QuizResponse", (string)null);
                });

            modelBuilder.Entity("AttendanceSystem.Models.SelectedQuizQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("QuestionBankID")
                        .HasColumnType("int");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("SelectedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("SelectedQuizQuestions");
                });

            modelBuilder.Entity("AttendanceSystem.Models.Student", b =>
                {
                    b.Property<string>("UTDID")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UTDID");

                    b.ToTable("Student", (string)null);
                });

            modelBuilder.Entity("AttendanceSystem.Models.Attendance", b =>
                {
                    b.HasOne("AttendanceSystem.Models.ClassSession", "ClassSession")
                        .WithMany("Attendance")
                        .HasForeignKey("SessionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassSession");
                });

            modelBuilder.Entity("AttendanceSystem.Models.ClassSession", b =>
                {
                    b.HasOne("AttendanceSystem.Models.Course", "Course")
                        .WithMany("ClassSessions")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AttendanceSystem.Models.QuizQuestionBank", "QuizQuestionBank")
                        .WithMany("ClassSessions")
                        .HasForeignKey("QuestionBankID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("QuizQuestionBank");
                });

            modelBuilder.Entity("AttendanceSystem.Models.Course", b =>
                {
                    b.HasOne("AttendanceSystem.Models.Professor", null)
                        .WithMany("Courses")
                        .HasForeignKey("ProfessorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AttendanceSystem.Models.CourseEnrollment", b =>
                {
                    b.HasOne("AttendanceSystem.Models.Course", "Course")
                        .WithMany("CourseEnrollments")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AttendanceSystem.Models.Student", "Student")
                        .WithMany("CourseEnrollments")
                        .HasForeignKey("UTDID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("AttendanceSystem.Models.QuizQuestion", b =>
                {
                    b.HasOne("AttendanceSystem.Models.QuizQuestionBank", "QuizQuestionBank")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuestionBankID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuizQuestionBank");
                });

            modelBuilder.Entity("AttendanceSystem.Models.QuizQuestionBank", b =>
                {
                    b.HasOne("AttendanceSystem.Models.Course", "Course")
                        .WithMany("QuizQuestionBanks")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("AttendanceSystem.Models.QuizResponse", b =>
                {
                    b.HasOne("AttendanceSystem.Models.Attendance", "Attendance")
                        .WithMany("QuizResponses")
                        .HasForeignKey("AttendanceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AttendanceSystem.Models.QuizQuestion", "QuizQuestion")
                        .WithMany("QuizResponses")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attendance");

                    b.Navigation("QuizQuestion");
                });

            modelBuilder.Entity("AttendanceSystem.Models.Attendance", b =>
                {
                    b.Navigation("QuizResponses");
                });

            modelBuilder.Entity("AttendanceSystem.Models.ClassSession", b =>
                {
                    b.Navigation("Attendance");
                });

            modelBuilder.Entity("AttendanceSystem.Models.Course", b =>
                {
                    b.Navigation("ClassSessions");

                    b.Navigation("CourseEnrollments");

                    b.Navigation("QuizQuestionBanks");
                });

            modelBuilder.Entity("AttendanceSystem.Models.Professor", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("AttendanceSystem.Models.QuizQuestion", b =>
                {
                    b.Navigation("QuizResponses");
                });

            modelBuilder.Entity("AttendanceSystem.Models.QuizQuestionBank", b =>
                {
                    b.Navigation("ClassSessions");

                    b.Navigation("QuizQuestions");
                });

            modelBuilder.Entity("AttendanceSystem.Models.Student", b =>
                {
                    b.Navigation("CourseEnrollments");
                });
#pragma warning restore 612, 618
        }
    }
}
