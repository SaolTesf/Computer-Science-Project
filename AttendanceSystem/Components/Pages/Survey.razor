<!-- Yoojin Lee yxl200067  -->
<!-- starting page  -->
@page "/survey/{accessCode}"
<!-- sets render mode for interactions -->
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations;
@inject IJSRuntime JSRuntime
@inject IHttpContextAccessor httpContextAccessor
<!-- to move to home page -->
@inject NavigationManager NavigationManager
<!--Injecting Services for API calls-->
@using AttendanceSystem.Models;
@using AttendanceSystem.Services
@inject IAttendanceService AttendanceService;
@inject IStudentService StudentService;
@inject IClassSessionService SessionService;
@inject ICourseEnrollmentService CourseEnrollmentService;
@inject ISessionQuestionService SessionQuestionService;
@inject IQuizQuestionService QuizQuestionService;
@inject ICourseService CourseService;
@using AttendanceSystem.Models.DTOs;
@inject GetIPService GetIPService;

<!-- CSS-->
<style>
    /* getting rid of default padding and white border */
    html, body {
    margin: 0;
    padding: 0;
    height: 100%;
    background-color: #f0f0f0;
    }

    /* background */
    .container {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-color: #f0f0f0;
    font-family: 'Roboto', sans-serif;
    }

    /* middle box */
    .form-box {
    margin-top: 3%;
    display: flex;
    flex-direction: column; /*stack vertically*/
    width: 90%;
    max-width: 600px;
    background: white;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    overflow: hidden;
    height: 85%;
    }

    /* title  */
    .title {
    background-color: #ff9800;
    color: white;
    padding: 15px;
    font-size: 20px;
    font-weight: bold;
    text-align: center;
    }

    .content {
    padding: 22px;
    overflow-y: auto; /*scroll within box for questions*/
    flex-grow: 1;
    }

    /* Student ID */
    .input-field {
    width: calc(100% - 16px);
    padding: 8px;
    margin-top: -5px;
    margin-bottom: 8px;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-size: 16px;
    }

    /* format for red text */
    .error-message {
    color: red;
    font-size: 14px;
    }

    /* format for each question prompt */
    .question {
    margin-top: 15px;
    font-weight: bold;
    }

    /* format for each answer choice */
    .options {
    display: flex;
    flex-direction: column;
    margin-top: 5px;
    }

    /* submit button  */
    .submit-btn {
    width: 100%;
    background-color: #ff9800;
    color: white;
    border: none;
    padding: 10px;
    font-size: 18px;
    font-weight: bold;
    border-radius: 5px;
    cursor: pointer;
    margin-top: 20px;
    }

    .submit-btn:hover {
    background-color: #e68900;
    }

    /* debugging + spacing out radio buttons */
    input[type="radio"] {
    appearance: auto;
    margin-right: 8px;
    }
</style>

<!-- link to font  -->
<head>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
</head>

<div class="container">
    <div class="form-box">
        <!-- title  dynamically includes the section name -->
        <div class="title">@classSectionName Student Attendance Survey</div>
        <div class="content">
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="error-message" style="margin-bottom: 15px;">
                    @errorMessage
                </div>
            }
            
            <!-- loading text while session data is fetching -->
            @if (isLoading)
            {
                <div style="text-align: center; margin: 20px 0;">
                    <p>Loading session information...</p>
                </div>
            }
            else if (currentSession != null)
            {
                <!-- allows data validation within [], allows making error messages -->
                <EditForm Model="@formData" OnSubmit="@HandleSubmit" @ref="editForm" FormName="SurveyForm">
                    <!-- allows data validation within [], allows making error messages -->
                    <DataAnnotationsValidator />
                    <!-- allows displaying error messages -->
                    <ValidationSummary />

                    <!-- student ID  -->
                    <div style="margin-top: 15px; margin-bottom: 30px;">
                        <label for="studentIdInput" style="display: block; margin-bottom: 5px; font-weight: bold;"> Student ID: </label>
                        <!-- binding input text to StudentID variable, limiting input to 10 chars -->
                        <InputText id="studentIdInput"
                        @bind-Value="formData.StudentID"
                        class="input-field"
                        maxlength="10"
                        pattern="\d*"
                        inputmode="numeric" />
                        <!-- validation here, based on validation in formData class below -->
                        <ValidationMessage For="@(() => formData.StudentID)" class="error-message" />
                    </div>
                    
                    <!-- MC choices part  -->
                    <!-- embedded C# if, showing error message at top if any question is empty at submission attempt -->
                    @if (showValidationError)
                    {
                        <div class="error-message" style="margin-bottom: 10px;">
                            Please answer all questions before submitting.
                        </div>
                    }
                    <!-- embedded C# for loop for Question list iteration-->
                    @for (int qIndex = 0; qIndex < questions.Count; qIndex++)
                    {
                        var q = questions[qIndex];
                        <div class="question" style="font-weight: bold; margin-bottom: 10px;">
                            @($"{qIndex + 1}. {q.QuestionText}")
                        </div>
                        <div class="options">
                            <!-- answer choices as radio buttons -->
                            <InputRadioGroup @bind-Value="q.SelectedAnswer" Name=@($"question-{qIndex}")>
                                @for (int i = 0; i < q.Choices.Count; i++)
                                {
                                    var choice = q.Choices[i];
                                    var label = (char)('A' + i);
                                    <label style="display: block; margin-bottom: 5px;">
                                        <InputRadio Value="@choice" />
                                        @($"{label}. {choice}")
                                    </label>
                                }
                            </InputRadioGroup>
                        </div>
                        <br />
                    }

                    <button type="submit" class="submit-btn">Submit</button>
                </EditForm>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    // parameters for UI messages and for API data
    public string accessCode { get; set; } = string.Empty;

    private string errorMessage = string.Empty;
    private EditForm? editForm;
    private string clientIp = string.Empty;
    private ClassSession? currentSession;
    private int? currentCourse;
    private List<SurveyQuestion> questions = new();
    private dynamic? currentCourseDetails;
    private string classSectionName = "..."; // placeholder when class section info is loading
    private bool isLoading = true;
    private bool showValidationError = false;

    private FormData formData = new FormData()
    {
        StudentID = string.Empty
    };

    // Model for quiz questions to display
    public class SurveyQuestion
    {
        public int QuestionID { get; set; }
        public string QuestionText { get; set; } = string.Empty;
        public List<string> Choices { get; set; } = new List<string>();
        public string? SelectedAnswer { get; set; }
    }

    // Form data class with validation
    public class FormData
    {
        [Required(ErrorMessage = "Student ID is required.")]
        [RegularExpression(@"^\d{10}$", ErrorMessage = "Student ID must be exactly 10 digits.")]
        public string? StudentID { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            // Get client IP address
            clientIp = GetIPService.GetClientIp();

            if (!string.IsNullOrWhiteSpace(accessCode))
            {
                // Get session by access code
                currentSession = await SessionService.GetByAccessCodeAsync(accessCode);
                
                if (currentSession == null)
                {
                    errorMessage = "Invalid or expired access code";
                    await Task.Delay(2000); // Brief delay
                    NavigationManager.NavigateTo("/", forceLoad: true);
                    return;
                }

                // Check if this IP has already submitted attendance
                var existingAttendance = await AttendanceService.GetAttendanceIdByIpAndSessionAsync(clientIp, currentSession.SessionID);
                if (existingAttendance.HasValue)
                {
                    errorMessage = "Attendance has already been recorded from this device";
                    await Task.Delay(2000);
                    NavigationManager.NavigateTo("/");
                    return;
                }

                // Get course information
                if (currentSession.CourseID.HasValue)
                {
                    currentCourse = currentSession.CourseID.Value;
                    
                    // Get course details
                    currentCourseDetails = await CourseService.GetCourseByIDAsync(currentCourse.Value);
                    
                    // Format course name
                    if (currentCourseDetails != null)
                    {
                        // Use reflection to access properties since we don't know the exact CourseDTO structure
                        var courseNumber = currentCourseDetails.GetType().GetProperty("CourseNumber")?.GetValue(currentCourseDetails, null)?.ToString() ?? "Unknown";
                        var courseName = currentCourseDetails.GetType().GetProperty("CourseName")?.GetValue(currentCourseDetails, null)?.ToString() ?? "Unknown";
                        var section = currentCourseDetails.GetType().GetProperty("Section")?.GetValue(currentCourseDetails, null)?.ToString() ?? "";
                        
                        classSectionName = $"{courseNumber} - {courseName} (Section {section})";
                    }
                    else
                    {
                        classSectionName = "Unknown Course";
                    }
                }
                
                // Load quiz questions for the session
                questions.Clear();
                var sessionQuestions = await SessionQuestionService.GetBySessionIdAsync(currentSession.SessionID);
                
                foreach (var sessionQuestion in sessionQuestions)
                {
                    // Fetch full question details by question ID
                    var quizQuestion = await QuizQuestionService.GetQuestionByIdAsync(sessionQuestion.QuestionID);
                    if (quizQuestion != null)
                    {
                        var surveyQuestion = new SurveyQuestion
                        {
                            QuestionID = quizQuestion.QuestionID,
                            QuestionText = quizQuestion.QuestionText,
                            Choices = new List<string>()
                        };
                        
                        // Add choices
                        surveyQuestion.Choices.Add(quizQuestion.Option1);
                        surveyQuestion.Choices.Add(quizQuestion.Option2);
                        
                        if (!string.IsNullOrWhiteSpace(quizQuestion.Option3))
                            surveyQuestion.Choices.Add(quizQuestion.Option3);
                            
                        if (!string.IsNullOrWhiteSpace(quizQuestion.Option4))
                            surveyQuestion.Choices.Add(quizQuestion.Option4);
                        
                        questions.Add(surveyQuestion);
                    }
                }
            }
            else
            {
                // No access code, redirect
                errorMessage = "No access code provided";
                NavigationManager.NavigateTo("/");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading session data: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    // Handle form submission
    private async Task HandleSubmit(EditContext context)
    {
        try
        {
            showValidationError = false;
            errorMessage = string.Empty;
            StateHasChanged();

            // Validate form
            if (!context.Validate())
            {
                return;
            }

            // Check if all questions have answers
            if (questions.Any(q => string.IsNullOrEmpty(q.SelectedAnswer)))
            {
                showValidationError = true;
                return;
            }

            // Verify student exists
            if (string.IsNullOrEmpty(formData.StudentID))
            {
                errorMessage = "Student ID is required";
                return;
            }
            
            // Attempt to locate student using ID
            var student = await StudentService.GetStudentByUTDIdAsync(formData.StudentID);
            if (student == null)
            {
                errorMessage = $"No student found with ID {formData.StudentID}";
                return;
            }

            // Verify student is enrolled in the course
            if (currentSession != null && currentSession.CourseID.HasValue)
            {
                var enrollment = await CourseEnrollmentService.GetEnrollmentByCourseIDAndUtdIdAsync(
                    currentSession.CourseID.Value, formData.StudentID);
                    
                if (enrollment == null)
                {
                    errorMessage = $"Student {formData.StudentID} is not enrolled in this course";
                    return;
                }
                
                // Check for duplicate submission
                var exists = await AttendanceService.GetAttendanceIdBySessionAndUtdIdAsync(
                    currentSession.SessionID, formData.StudentID);
                    
                if (exists != 0)
                {
                    errorMessage = "Attendance for this student has already been recorded";
                    return;
                }
            }
            else
            {
                errorMessage = "Session or course information is missing";
                return;
            }

            // Confirm submission with the user
            bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to submit your answers?");
            if (!confirmed)
            {
                return;
            }

            // Record attendance and quiz responses
            if (currentSession != null && !string.IsNullOrEmpty(formData.StudentID))
            {
                var attendance = new Attendance
                {
                    SessionID = currentSession.SessionID,
                    UTDID = formData.StudentID,
                    SubmissionTime = DateTime.Now,
                    IPAddress = clientIp,
                    AttendanceType = AttendanceType.Present
                };

                // Save attendance
                await AttendanceService.CreateAttendanceAsync(attendance);

                // Show success message
                await JSRuntime.InvokeVoidAsync("alert", "Your attendance and quiz responses have been recorded successfully!");
                
                // Redirect to confirmation page or home
                NavigationManager.NavigateTo("/");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error submitting your responses: {ex.Message}";
            if (!IsStaticRender())
            {
                await JSRuntime.InvokeVoidAsync("console.error", $"Error in HandleSubmit: {ex}");
            }
        }
    }

    // Helper method to determine if this is a static render
    private bool IsStaticRender()
    {
        try
        {
            JSRuntime.InvokeVoidAsync("console.log", "");
            return false; // If we get here, we're not in static rendering
        }
        catch
        {
            return true; // Exception means we're in static rendering
        }
    }
}