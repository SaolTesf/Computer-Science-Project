<!-- yxl200067  -->
@page "/survey"
<!-- starting page  -->
@page "/"
<!-- sets render mode for interactions -->
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations;
@inject IJSRuntime JSRuntime
@inject IHttpContextAccessor httpContextAccessor
<!-- to move to home page -->
@inject NavigationManager NavigationManager
<!--Injecting Services for API calls-->
 @using AttendanceSystem.Models;
 @using AttendanceSystem.Services
 @inject IAttendanceService AttendanceService;
 @inject IStudentService StudentService;
 @inject GetIPService GetIPService;

<!-- CSS  -->
<style>
    .container {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-color: #f0f0f0;
    }

    .form-box {
    width: 90%;
    max-width: 600px;
    background: white;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    overflow: hidden;
    }

    .title {
    background-color: #ff9800;
    color: white;
    padding: 15px;
    font-size: 20px;
    font-weight: bold;
    text-align: center;
    }

    .content {
    padding: 20px;
    }

    .input-field {
    width: 100%;
    padding: 8px;
    margin-top: 5px;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-size: 16px;
    }

    .error-message {
    color: red;
    font-size: 14px;
    }

    .question {
    margin-top: 15px;
    font-weight: bold;
    }

    .options {
    display: flex;
    flex-direction: column;
    margin-top: 5px;
    }

    .submit-btn {
    width: 100%;
    background-color: #ff9800;
    color: white;
    border: none;
    padding: 10px;
    font-size: 18px;
    font-weight: bold;
    border-radius: 5px;
    cursor: pointer;
    margin-top: 20px;
    }

    .submit-btn:hover {
    background-color: #e68900;
    }

    input[type="radio"] {
    appearance: auto;
    margin-right: 8px;
    }
</style>

<div class="container">
    <div class="form-box">
        <div class="title">Student Attendance Survey</div>
        <div class="content">
            <!-- allows data validation within [], allows making error messages -->
            <EditForm Model="@formData" OnSubmit="@HandleSubmit" @ref="editForm" FormName="SurveyForm">
                <DataAnnotationsValidator />
                <!-- allows displaying error messages -->
                <ValidationSummary />

                <!-- student ID  -->
                <div style="margin-top: 30px; margin-bottom: 40px;">
                    <label for="studentIdInput" style="display: block; margin-bottom: 5px;"> Student ID: </label>
                    <!-- binding input text to StudentID variable, limiting input to 10 chars -->
                    <InputText id="studentIdInput"
                    @bind-Value="formData.StudentID"
                    class="input-field"
                    maxlength="10"
                    pattern="\d*"
                    inputmode="numeric" />
                    <!-- validation here, based on validation in formData class below -->
                    <ValidationMessage For="@(() => formData.StudentID)" class="error-message" />
                </div>
                <!-- MC choices part  -->
                <!-- embedded C# if, showing error message at top if any question is empty at submission attempt -->
                @if (showValidationError)
                {
                    <div class="error-message" style="margin-bottom: 10px;">
                        Please answer all questions before submitting.
                    </div>
                }
                <!-- Error message if student is not found -->
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="error-message" style="margin-top: 10px;">
                        @errorMessage
                    </div>
                }
                <!-- embedded C# for loop for Question list iteration-->
                @for (int qIndex = 0; qIndex < questions.Count; qIndex++)
                {
                    var q = questions[qIndex];
                    <div class="question" style="font-weight: bold; margin-bottom: 10px;">
                        @($"{qIndex + 1}. {q.QuestionText}")
                    </div>
                    <InputRadioGroup @bind-Value="q.SelectedAnswer" TValue="string" Name=@($"question-{qIndex}")>
                        @for (int i = 0; i < q.Choices.Count; i++)
                        {
                            <label style="display: block; margin-bottom: 5px;">
                                <InputRadio Value="@q.Choices[i]" @key="@q.Choices[i]" />
                                @($"{(char)('a' + i)}) {q.Choices[i]}")
                            </label>
                        }
                    </InputRadioGroup>
                    <br />
                }

                <button type="submit" class="submit-btn">Submit</button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private string errorMessage = string.Empty;
    private EditForm? editForm;
    private string clientIp = string.Empty;

    // temp example question box
    private List<string> rawQuestions = new List<string>
    {
        "What is the region of diagram that consist of an operator or label?\tGRASP\tFrame\tUML\tCRC",
        "True or False: Obligations can and do vary significantly by context.\tTrue\tFalse",
        "What are Benefits of Design by Contract?\t SOLID’s “single responsibility” principle at method level\t“Pseudocode Programming Process\tBasis for “Programming by Intent”\tunit testing\tAll of the above"
    };

    private List<SurveyQuestion> questions = new();

    private FormData formData = new FormData()
    {
        StudentID = string.Empty
    };

    private bool showValidationError = false;

    // parse question bank - split question bank into parts
    protected override void OnInitialized()
    {
        clientIp = GetIPService.GetClientIp();
        questions = rawQuestions.Select(q =>
        {
            var parts = q.Split('\t');
            return new SurveyQuestion
            {
                QuestionText = parts[0],
                Choices = parts.Skip(1).ToList(),
                SelectedAnswer = null
            };
        }).ToList();
    }

    // initializing varibales for question
    public class SurveyQuestion
    {
        public string? QuestionText { get; set; }
        public List<string> Choices { get; set; } = new List<string>();
        public string? SelectedAnswer { get; set; }
    }

    public class FormData
    {
        [Required(ErrorMessage = "Student ID is required.")]
        [RegularExpression(@"^\d{10,10}$", ErrorMessage = "Only numbers allowed, exactly 10 characters.")]
        public string? StudentID { get; set; }
    }

    private async Task HandleSubmit(EditContext context)
    {
        showValidationError = false;
        StateHasChanged();

        // validate StudentID and that all questions are answered
        if (context.Validate() && questions.All(q => !string.IsNullOrEmpty(q.SelectedAnswer)))
        {
            var student = await StudentService.GetStudentByUTDIdAsync(formData.StudentID);
            if (student != null)
            {
                bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to submit?");
                if (confirmed)
                {
                    Console.WriteLine($"Submitted: {formData.StudentID}");
                    foreach (var q in questions)
                    {
                        Console.WriteLine($"Q: {q.QuestionText} - A: {q.SelectedAnswer}");
                    }
                    NavigationManager.NavigateTo("/home");
                }
            }
            else
            {
                errorMessage = $"No student found with UTDID {formData.StudentID}.";
            }
        }
        else
        {
            showValidationError = true;
            Console.WriteLine("Form validation failed");
        }
}
}